// zips.loc[*] = smallZips.city

LeftShift(
  Map(Unreferenced,
    ConcatArrays(
      MakeArray(ConcatArrays(MakeArray(JoinSideName('__leftJoin9)), Constant(Arr(List(Str(loc)))))),
      MakeArray(ConcatArrays(MakeArray(JoinSideName('__rightJoin10)), Constant(Arr(List(Str(city)))))))),
  ProjectField(
    ProjectIndex(ProjectIndex(SrcHole, Constant(Int(0))), Constant(Int(0))),
    ProjectIndex(ProjectIndex(SrcHole, Constant(Int(0))), Constant(Int(1)))),
  IncludeId,
  Eq(
    ProjectIndex(RightSide, Constant(Int(1))),
    ProjectField(ProjectIndex(ProjectIndex(LeftSide, Constant(Int(1))), Constant(Int(0))), ProjectIndex(ProjectIndex(LeftSide, Constant(Int(1))), Constant(Int(1))))))


this is the entire join condition; it references left and right sides with JoinSideName
we need to create a JoinFunc
  (a) replace the JoinSideName with LeftSide and RightSide
  (b) create a JoinFunc where the outermost structure is the LeftShift repair
  (c) preserve the shift information by moving it into the left/right side FreeQS

what are the challenges
we don't know if the left or right (or both) join branches need to be updated
so we need an algorithm that works in either case

(1) detect a Map as the LeftShift src, and replace the JoinSideName with LeftSide and RightSide
    this gives us a JoinFunc called src0
(2) take the LeftShift struct and replace the holes with the src0 (produces new JoinFunc)
    we run normalizations on this and result is src1=ProjectField(LeftSide, "loc")
(3) src1 may contain LeftSide and/or RightSide
    (what if it contains both - would there be two LeftShift then?)
    this represents the _shifted_ values
    let's assume it has only LeftSide or RightSide
(4) obtain the appropriate join branch FreeQS
    replace LeftSide/RightSide with SrcHole in src1 creating src2=ProjectField(SrcHole "loc")
    create LeftShift(branch, src2, [LeftSide, RightSide]) as the new join branch
(5) create/update the actual join condition and combine
    the combine is updated to reference index 0
    the condition is created from the original LeftShift repair
(6) this works with individual LeftShift but what about more complicated join conditions
    e.g. foo.bax[*].bar{*} = ack[*]{*}.bak
    we may need to do something incremental in the mergeSrcs algorithm
    maybe merging in the context of a join condition makes sense
    i.e. we recognize while we merge that the goal is to produce a join condition
(7) relatively convinced that instead of attempting to deconstruct the resulting merge
    we should instead construct what we actually need
    the problem is, though, that we don't know if we're in the context of a join until it's too late
    can we solve this sooner, in LP?
    do we need to special represent shifts that are in join conditions so that we can get them out?
    or even add a shift field to qscript join? (this isn't correct but maybe a line of thought)

    




// zips.loc[*] = smallZips.city{*}

below doesn't make any sense if we assume that leftJoin9=zips and rightJoin10=smallZips
the join branches must be something else; otherwise the qscript is incorrect 
we can print the join branches to see what they are
as is, the join condition in the theta join below will never be true
but that doesn't align with the combine, so it's confusing

ThetaJoin(
  Map(Unreferenced,
    ConcatArrays(
      MakeArray(ConcatArrays(MakeArray(JoinSideName('__leftJoin9)), Constant(Arr(List(Str(loc)))))),
      MakeArray(ConcatArrays(MakeArray(JoinSideName('__rightJoin10)), Constant(Arr(List(Str(city)))))))),
  LeftShift(
    Map(SrcHole, ProjectIndex(SrcHole, Constant(Int(0)))), // [leftJoin9, "loc"]
    ProjectField(ProjectIndex(SrcHole, Constant(Int(0))), ProjectIndex(SrcHole, Constant(Int(1)))),
    IncludeId,
    ConcatArrays(MakeArray(LeftSide), MakeArray(RightSide))),
  LeftShift(
    Map(SrcHole, ProjectIndex(SrcHole, Constant(Int(1)))), // [rightJoin10, "city"]
    ProjectField(ProjectIndex(SrcHole, Constant(Int(0))), ProjectIndex(SrcHole, Constant(Int(1)))),
    IncludeId,
    ConcatArrays(MakeArray(LeftSide), MakeArray(RightSide))),
  Eq(
    ProjectIndex(ProjectIndex(LeftSide, Constant(Int(0))), Constant(Int(0))),   // leftJoin9
    ProjectIndex(ProjectIndex(RightSide, Constant(Int(1))), Constant(Int(0)))), // rightJoin10.city{*}[0]
  Inner,
  Eq(
    ProjectIndex(ProjectIndex(LeftSide, Constant(Int(1))), Constant(Int(1))),   // leftJoin9.loc[*][1]
    ProjectIndex(ProjectIndex(RightSide, Constant(Int(1))), Constant(Int(1))))) // rightJoin10.city{*}[1]
